Qt 5 is the latest version of Qt. It enables developers to develop applications with intuitive user interfaces for multiple targets, faster than ever before. Qt 5 makes it easier to address the latest UI paradigm shifts that touch screens and tablets require.

Developers can be more productive and flexible with the improved support for JavaScript and QML in Qt 5, while still having the C++ foundation and Qt Widget support. HTML5 developers will feel at home with the Web offering that includes Chromium-based Qt WebEngine and Qt WebChannel.

Qt 5 is highly compatible with Qt 4. It is possible for developers of Qt 4 applications to seamlessly move on to Qt 5 with their current functionality and gradually develop new things leveraging all the great items Qt 5 makes possible.

Cross-platform portability is made simpler in Qt 5, thanks to the new modularized codebase consisting of the essential and add-on modules, and the consolidation of the Qt Platform Abstraction.

The following sections summarize some of the key features that Qt 5 brings to the table.

Qt Everywhere on Mobile

Qt now comes with production-ready ports for Android, iOS, and WinRT. Extensive work has gone into these platform ports, which now extend Qt’s multi-platform promise to cover desktop, embedded, and mobile platforms.

With full support for Android, iOS, and WinRT, Qt is a great solution for targeting the mobile markets with a single codebase. It is fast and easy to bring existing desktop or embedded application to mobile, by simply recompiling it.

You can install several demo applications that showcase the power of Qt on these mobile platforms. Here is a small list of such applications:

Demo applications:

    Introduction to Qt 5 (Google Play)
    Qt 5 Everywhere (Google Play)
    SubAttack (App Store)
    QtQuicksand (App Store)
    Quick Forecast on App Store, Google Play, and Windows Store.
    Qt Hangman on App Store and Google Play
    Flyingbus on App Store and Google Play

Platform pages:

    Qt for Android
    Qt for iOS
    Qt for WinRT
Amazing Graphics Capability and Performance
Qt 5 uses an OpenGL-based scene graph to accelerate the graphics of Qt Quick, making it possible to do visually appealing user interfaces with animations, impressive graphical effects and particle systems, even on the constrained hardware environments of mobile and embedded devices.

The benefits of this architectural change in the rendering engine are well demonstrated by the following projects:

    Livecoding video effects with Qt5 - The Big Buck Bunny you never saw before. Video effects created using Qt Quick.
    Pimp my video - Video effects implemented using the shader language with QML.
    QtMediaHub - The power and convenience of Qt Quick.
    QtonPi - Good example of Qt 5 running on the low cost hardware, Raspberry PI.
    
    t Quick in Qt 5

Qt Quick provides the necessary infrastructure to develop QML applications. The latest version (v2.0) of this technology also introduces a set of new C++ classes as a replacement for the QDeclarative* equivalents in Qt Quick 1. New features in Qt Quick include:

    Canvas for drawing. Canvas provides an API that is similar to the HTML5 Canvas API, along with some additional features.
    Shader Effects which enable GLSL shader programs to be integrated directly into QML code and applied to items and images.
    Particle Effects for creating a variety of 2D particle systems.
    Sprites can be used in animating 2D graphical objects and as a source for particle systems.
    Offline storage is a JavaScript API that conforms with the HTML5 Web Database API for storing data in Qt Quick applications.
    Window provides a top-level window and the Screen type for accessing a screen's resolution and other details. This is useful for desktop applications developed using Qt Quick.
    OpenGL-based rendering architecture for optimal performance

    The Qt Graphical Effects module provides a number of ready-made effects for use in Qt Quick applications, including soft drop shadow, blur, glow and colorize.
    
    UI designing can be time consuming if there are not enough tools to help. Qt Quick reduces the effort considerably compared to the traditional native (C or C++) approach, especially if the Qt Quick Controls or Qt Quick Controls 2 and Qt Quick Layouts modules are used. These modules provide ready-to-use UI controls and layouts to enable faster application development with less code. For a comparison of the two sets of controls, see Differences between Qt Quick Controls.

Qt Quick Controls and Qt Quick Layouts provide a vast set of UI controls ranging from the most basic text field and button to the more complex stack view and tumbler. The controls are also made available in Qt Quick Designer.
Platform-specific Extras

Qt is a cross-platform development framework enabling you to target multiple platforms with a single codebase. It provides common APIs across all supported platforms to access a feature without having to worry about how that feature is implemented on a platform. In some applications there will be a need to use a platform-specific feature, and that's when the following modules can be useful:

    Qt Android Extras enables you to integrate Java code into your Qt application.
    Qt Mac Extras enables you to access specific features on macOS and iOS.
    Qt Windows Extras enables you to use Windows-specific features such as jump lists, progress indicator on a taskbar button, and so on.
    Qt X11 Extras enables you to access the display configuration on Linux (X11).

Modularized Qt Libraries

Qt 5 splits the Qt libraries into domain specific libraries and modules. This means that an application can choose which libraries it requires and only compile, use and deploy those.

For a complete list of modules and libraries, see all Qt modules.
Widgets in Qt 5

The Qt Widgets have been separated into their own module in Qt 5, the Qt Widgets module. It is part of the essential modules.
Provide Map-based Solutions with Qt

In today's world, location and maps information is more widely used, be it to look up nearby restaurants or plan commute to the office. With Qt, it is now possible to cater to these use cases by consuming map data provided by the third-party vendors. The Qt Location module provides the APIs and the necessary backend to fetch map data from some of the popular third-party mapping solutions. Here is a snapshot of the demo application running on Android, presenting OpenStreetMap data from www.mapquest.com.

Qt Platform Abstraction

The windowing system dependent parts of Qt have been completely rewritten for Qt 5, based on the Qt Platform Abstraction, a plugin architecture which allows Qt to dynamically load a windowing system integration based on what system it is running on. This gives several benefits:

    Centralize the windowing system integration codebase into classes shared for all platforms.
    Simplify the work required when porting Qt to new platforms.
    Remove the windowing system dependency from Qt, making it possible to have the same Qt binaries run against multiple windowing systems. For instance, the Qt Linux binaries can run against both X11 and Wayland.

New Connection Syntax

In addition to the still available well known way to connect signals and slots, new overloads of QObject::connect have been added allowing you to connect signals and slot using pointer to member functions:

Connectivity and Networking

Qt 5 provides better support for IPv6 and dual mode networks. Most applications using host names and network layer transparent protocols can now gain IPv6 support transparently. Such applications can also choose to receive both IPv4 and IPv6 connections or bind to only one of the two connection types. In the case of outgoing HTTP connections using QNetworkAccessManager, both IPv4 and IPv6 connections are attempted in parallel, and the one that succeeds first is used. This is useful in environments where one of the two types has limited connectivity.

Qt 5 also provides better ways to handle TCP socket-based connections and SSL certificates. This means developers can now:

    bind a TCP socket to an IP address before connecting,
    verify an SSL certificate chain,
    and access legacy systems.

Stricter client authentication is one of the primary concerns for many applications handling confidential or critical data. The opaque Private Keys support in Qt 5 enables applications to read private keys from devices such as PKCS#11 dongles for stricter client authentication. The qsslkey example illustrates reading private keys from a device.
Extended Connectivity

The connectivity options are endless with Qt 5. The two new modules, Qt Bluetooth and Qt NFC, enable developers to add support for sophisticated ways to connect and share information in their application.

JSON Support

Qt applications that use simple data structures to store small amount of data, can now choose to use JSON documents over the complex database backends that need necessary drivers or plugins to access data. The fact that JSON is a text-based open standard derived from JavaScript, makes it the obvious choice for QML applications as well.

The Qt Core provides a set of classes to enable parsing and generating JSON documents. These classes also allow you to convert between an in-memory binary representation of JSON to a standard textual JSON format. The goal is to make common operations on JSON faster.
User Input

Qt 4 already had support for handling multi-point touch input in C++. Qt 5 extends this support to include Qt Quick, covering all the information about the touch points, including the touch position, pressure, and velocity.

The mouse event handling in Qt 5 has been improved from its predecessor. Applications have more control to handle mouse events in Qt Quick. The mouse area in a QML document can propagate the mouse wheel and click events and also ignore propagated events.

Besides this, Qt 5 adds support for more mouse buttons on platforms where this is supported. This comes in handy for gaming applications developed using Qt.

Gstreamer is a tool for manipulating video streams. It is both a software library and that library called from a command line tool. The purposes I have used it for is mainly to stream video in real time over a local area IP network. Doing that I found a lack of basic tutorials on how to do that using the command line.

This tutorial covers the basics of live streaming. To read or write files will not be covered, though the basics of that is easy following the same principles as broadcasting the streams. If you want to see a comparison of the real time capabilities of the streams, that is a post coming soon.

“Real time” in this context is if the streams passed a sort of Turing test. If you cannot distinguish between the original and the copy, it passes. Note that because of the quite short deadline for the images I didn’t add any buffers to my stream, if the image is not within its deadline it should be discarded. The use of a queue element could have smoothed the stream but to the price of higher latency.


So far your stream has consisted of the uncompressed readings from the camera device and the testvideo. This is heavy to send over a network since it is unpacked video data with a high bit rate. But if the network capacity is high and the processors on the sending or receiving ends are slow this might be a solution to consider.

For this tutorial I will cover three types of video compression, Mjpeg, Mpeg 2 and V8. There are many more, and encoding those follow the same basic pattern as the examples in here.

This step is pretty simple. The videostreams that previously has been piped to autovideosink is now piped to the encoder pad with for example ! jpegdec for mjpeg encoding and ! vp8enc or ! avenc_mpeg4 for VP8 and Mpeg 2. Those encoders have multiple elements that can be changed to create the stream you want. A complete list can be provided by gst-inspect-1.0 <encoder name>. Some of the more useful are

Executing those lines will result in an error since the encoder is not a sink. Which brings us to the next step which can either be payloading for network transfer or sending it to a sink. I this case the sink can’t be a network sink, since that requires the images to be loaded in a network protocol to be reliably transmitted.
This tutorial assumes you are using gstreamer 1.0.





